<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Solid Studios</title>
    <description>Just an amazing game design company..</description>
    <link>http://yourdomain.com/</link>
    <atom:link href="http://yourdomain.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 21 Mar 2015 14:31:00 -0400</pubDate>
    <lastBuildDate>Sat, 21 Mar 2015 14:31:00 -0400</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Project: Binder</title>
        <description>&lt;h4 id=&quot;binder&quot;&gt;Binder&lt;/h4&gt;
&lt;p&gt;Binder is a game. A tool, to help you create, and to explore. The art of shaping the world around you is explored and used throughout gameplay. Begin with nothing, only your imagination. You can explore the world around you, or begin discovering the strange life-filled scene all around you. Your initial home is the world of Thython, the land of light. Golden water, and lush forests bloom around you. The entire world is at your fingertips, will you discover new things? Travel to distant worlds? Or will you create powerful things and wonderful times? It’s your choice!&lt;/p&gt;

&lt;h4 id=&quot;about&quot;&gt;About&lt;/h4&gt;
&lt;p&gt;Binder, not yet released, is recommended for people ages 10+&lt;/p&gt;
</description>
        <pubDate>Thu, 19 Mar 2015 08:53:15 -0400</pubDate>
        <link>http://yourdomain.com/project/binder/binder</link>
        <guid isPermaLink="true">http://yourdomain.com/project/binder/binder</guid>
        
        
        <category>project</category>
        
        <category>binder</category>
        
      </item>
    
      <item>
        <title>Blog: Universal Game Application Loader</title>
        <description>
</description>
        <pubDate>Thu, 19 Mar 2015 00:00:00 -0400</pubDate>
        <link>http://yourdomain.com/blog/ugap/UGAP</link>
        <guid isPermaLink="true">http://yourdomain.com/blog/ugap/UGAP</guid>
        
        
        <category>blog</category>
        
        <category>ugap</category>
        
      </item>
    
      <item>
        <title>Blog: Binder development is starting!</title>
        <description>&lt;h4 id=&quot;binder-the-intuitively-creative-game&quot;&gt;Binder, the intuitively creative game.&lt;/h4&gt;

&lt;p&gt;Hello, my name is Walt. I write code for fun, and work on projects that are exactly that! Binder is one of those projects. Together with lowell07 (Lowell Davis), we have been able to make a game. The game is titled Binder, not for any specific reason other than it sounds weird. &lt;/p&gt;

&lt;p&gt;Inside Binder you play as a person, a person who doesn’t like the world as it is. So, by definition he/she wants to change that. Your job is to repair the universe, build star-gates, fight monsters, eat cookies, and have fun! &lt;/p&gt;

&lt;p&gt;Binder is full of action and adventure, though still young in it’s development we plan to release in the summer of 2017. Binder comes fully-customizable with an entire API dedicated soley to writing modifications. &lt;/p&gt;

&lt;p&gt;Binder is written in Java, allowing us to dynamically load your modifications with ease. We provide that neccissary core-classes that will allow you to modify what you need to, and not have to worry about Vertex Buffer Objects and the such.&lt;/p&gt;

&lt;p&gt;Binder is built ontop of the firm foundation of LWJGL, a proven Java OpenGL library. The game comes with native sound libraries, and also a fun loving texture pack just waiting to smile. &lt;/p&gt;

&lt;p&gt;Using the native API, you can easily create an entire new GameLoop, the heart and brain of the game! Simply create a new Java class that extends the GameLoop class, send it to the BinderLoader class, and wow!&lt;/p&gt;

&lt;p&gt;That’s all for now, I look forward to releasing the game soon!&lt;/p&gt;
</description>
        <pubDate>Thu, 19 Mar 2015 00:00:00 -0400</pubDate>
        <link>http://yourdomain.com/blog/tips&tricks/code-snippets/binder/Binder-development-starts-now</link>
        <guid isPermaLink="true">http://yourdomain.com/blog/tips&tricks/code-snippets/binder/Binder-development-starts-now</guid>
        
        
        <category>blog</category>
        
        <category>tips&amp;tricks</category>
        
        <category>code-snippets</category>
        
        <category>binder</category>
        
      </item>
    
      <item>
        <title>Blog: Binder API</title>
        <description>&lt;h3 id=&quot;binder-api&quot;&gt;Binder API&lt;/h3&gt;

&lt;p&gt;The Binder API is in development, and will release soon after the game. The API (entitled Knapsack) is fully integrated, and will work fully with the obfuscated code. The Binder source will come obfuscated to prevent any copyright-infringement, but the API will add a clean, easy to use face on the messy code. For example in the Binder code (example class) the chunk class will be class Z, to render it we would call:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Z a = new Z(0, 0, 0);
a.d();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But using Knapsack (which does all the nitty-gritty stuff) it would simply be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Chunk c = new Chunk(0, 0, 0);
c.render();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Easy huh? &lt;/p&gt;

&lt;h4 id=&quot;plugin-system&quot;&gt;Plugin System&lt;/h4&gt;

&lt;p&gt;Another improvement to the game code we made is that Knapsack is able to load plugins. Plugins are little &lt;strong&gt;JAR&lt;/strong&gt; files that contain new classes to expand Binder. The classes can be new worlds, new monsters, new blocks, new shapes, new textures, you name it! Each plugin is activated by the &lt;strong&gt;PluginLoader&lt;/strong&gt; class. In order for a plugin to be activated, it must have an entry in the &lt;strong&gt;Plugins.json&lt;/strong&gt; that follows the default formatting. So, in order to have your plugin activated on runtime simply add these lines to the &lt;strong&gt;Plugins.json&lt;/strong&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&quot;ExamplePlugin&quot;: {
  &quot;main&quot;: &quot;me.wxwsk8er.ExamplePlugin.ExampleClass&quot;,
  &quot;name&quot;: &quot;ExamplePlugin&quot;,
  &quot;version&quot;: &quot;0.0.1&quot;,
  &quot;author&quot;: &quot;wxwsk8er&quot;,
  &quot;req_knapsack_v&quot;: &quot;0.0.1&quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that these are &lt;strong&gt;JSON&lt;/strong&gt; formatted, this is required! Now, if you don’t understand any of that let me explain. Hopefully you are a little used to with the &lt;strong&gt;JSON&lt;/strong&gt; language (or &lt;strong&gt;YAML&lt;/strong&gt;) and can see the structure. It follows this structure:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;[Plugin Entry Name]
    &lt;ul&gt;
      &lt;li&gt;[Plugin main class (extends JavaPlugin)]&lt;/li&gt;
      &lt;li&gt;[Plugin name]&lt;/li&gt;
      &lt;li&gt;[Plugin version]&lt;/li&gt;
      &lt;li&gt;[Plugin (lead) author]&lt;/li&gt;
      &lt;li&gt;[Version of Knapsack it was created for]&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each plugin must have &lt;strong&gt;ONE&lt;/strong&gt; class that &lt;strong&gt;&lt;em&gt;extends JavaPlugin&lt;/em&gt;&lt;/strong&gt;, this is the class path that you use for the &lt;strong&gt;&lt;em&gt;main&lt;/em&gt;&lt;/strong&gt; attribute in your entry. This class will have a dedicated GID, configuration module, enable and disable methods, and a full event listener system. You can see the full list of items by typing &lt;strong&gt;&lt;em&gt;this.&lt;/em&gt;&lt;/strong&gt; in eclipse, all fields should showup. &lt;/p&gt;

&lt;h4 id=&quot;configuration-module&quot;&gt;Configuration Module&lt;/h4&gt;

&lt;p&gt;Knapsack ships with a built-in configuration module already setup to work with &lt;strong&gt;JSON&lt;/strong&gt; configuration files. Full &lt;strong&gt;&lt;em&gt;get()&lt;/em&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;isSet()&lt;/em&gt;&lt;/strong&gt;, and &lt;strong&gt;&lt;em&gt;save()&lt;/em&gt;&lt;/strong&gt; methods are included. Knapsack not only provides a working &lt;strong&gt;JSON&lt;/strong&gt; configuration system, but even better [other than smiles]! Knapsack comes with abstract interfaces allowing you to create your own configuration modules. Infact, you could even make your own configuration language and use it!&lt;/p&gt;

&lt;p&gt;For starters, every &lt;strong&gt;Configuration&lt;/strong&gt; modules starts as a replica of the &lt;strong&gt;ConfigurationSection&lt;/strong&gt; class.  If all you want to do is use your module as a memory configuration, just implement the &lt;strong&gt;Configuration&lt;/strong&gt; class. If you want to have full file access (&lt;em&gt;save()&lt;/em&gt;, &lt;em&gt;read()&lt;/em&gt;, &lt;em&gt;write()&lt;/em&gt;, etc) you will need to &lt;strong&gt;&lt;em&gt;extend&lt;/em&gt;&lt;/strong&gt; the &lt;strong&gt;FileConfiguration&lt;/strong&gt; class. This class allows the creation of file configuration modules that can be recognized universally. The extends keyword masks the class’s data type to be &lt;strong&gt;FileConfiguration&lt;/strong&gt;, and allows the interfacing methods to be used universally. So if you want to build off of the JSONConfiguration class, you can get it &lt;a href=&quot;https://github.com/BiggerOnTheInside/Knapsack/blob/API/src/me/wxwsk8er/Knapsack/Configuration/JSONConfiguration.java&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 19 Mar 2015 00:00:00 -0400</pubDate>
        <link>http://yourdomain.com/blog/binder/code-snippets/api/Binder-API-released</link>
        <guid isPermaLink="true">http://yourdomain.com/blog/binder/code-snippets/api/Binder-API-released</guid>
        
        
        <category>blog</category>
        
        <category>binder</category>
        
        <category>code-snippets</category>
        
        <category>api</category>
        
      </item>
    
      <item>
        <title>Question: Why did the Chicken cross the road?</title>
        <description>&lt;p&gt;To get to the other side.&lt;/p&gt;
</description>
        <pubDate>Fri, 25 Apr 2014 12:54:46 -0400</pubDate>
        <link>http://yourdomain.com/question/your-project-name</link>
        <guid isPermaLink="true">http://yourdomain.com/question/your-project-name</guid>
        
        
        <category>question</category>
        
      </item>
    
  </channel>
</rss>
